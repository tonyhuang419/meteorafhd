登录后用url获取好友
http://xn.hf.fminutes.com/api.php?mod=friend&farmKey=2a67efcad7d1e7817a8d0e2531750865&farmTime=1238846444

通过获取菜地情况
http://xn.hf.fminutes.com/api.php?mod=user&act=run&flag=1&farmKey=8eae0084bc735ef5736d000c24ac73c2&farmTime=1238846698

访问好友的方法在
类：MainCommand
方法：getCropStatus
会提交一个POST	请求
post内容为：
Parameter:ownerId 
value:好友ID



好友请求生成：
类：Fram.swf: hf.FBridge
方法：
private function request(param1:String, param2:Object, param3:Function, param4:int = 60000, param5:Boolean = false, param6:String = "text") : void
涉及方法
MData.getInstance().mainData.serverTime;
/**
        public function get serverTime() : Number
        {
            if (_serverTime == 0)
            {
                return Math.floor(new Date().getTime() / 1000);
            }// end if
            return _serverTime + (Math.floor(getTimer() / 1000) - _clientTime);
        }// end function
*/

MD5.hash
/**
 public static function hash(param1:String) : String
        {
            var _loc_6:int;
            var _loc_7:int;
            var _loc_8:int;
            var _loc_9:int;
            var _loc_2:int;
            var _loc_3:int;
            var _loc_4:int;
            var _loc_5:int;
            var _loc_10:* = createBlocks(param1);
            var _loc_11:* = createBlocks(param1).length;
            var _loc_12:int;
            while (_loc_12 < _loc_11)
            {
                // label
                _loc_6 = _loc_2;
                _loc_7 = _loc_3;
                _loc_8 = _loc_4;
                _loc_9 = _loc_5;
                _loc_2 = ff(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 0], 7, -680876936);
                _loc_5 = ff(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 1], 12, -389564586);
                _loc_4 = ff(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 2], 17, 606105819);
                _loc_3 = ff(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 3], 22, -1044525330);
                _loc_2 = ff(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 4], 7, -176418897);
                _loc_5 = ff(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 5], 12, 1200080426);
                _loc_4 = ff(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 6], 17, -1473231341);
                _loc_3 = ff(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 7], 22, -45705983);
                _loc_2 = ff(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 8], 7, 1770035416);
                _loc_5 = ff(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 9], 12, -1958414417);
                _loc_4 = ff(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 10], 17, -42063);
                _loc_3 = ff(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 11], 22, -1990404162);
                _loc_2 = ff(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 12], 7, 1804603682);
                _loc_5 = ff(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 13], 12, -40341101);
                _loc_4 = ff(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 14], 17, -1502002290);
                _loc_3 = ff(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 15], 22, 1236535329);
                _loc_2 = gg(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 1], 5, -165796510);
                _loc_5 = gg(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 6], 9, -1069501632);
                _loc_4 = gg(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 11], 14, 643717713);
                _loc_3 = gg(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 0], 20, -373897302);
                _loc_2 = gg(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 5], 5, -701558691);
                _loc_5 = gg(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 10], 9, 38016083);
                _loc_4 = gg(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 15], 14, -660478335);
                _loc_3 = gg(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 4], 20, -405537848);
                _loc_2 = gg(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 9], 5, 568446438);
                _loc_5 = gg(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 14], 9, -1019803690);
                _loc_4 = gg(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 3], 14, -187363961);
                _loc_3 = gg(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 8], 20, 1163531501);
                _loc_2 = gg(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 13], 5, -1444681467);
                _loc_5 = gg(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 2], 9, -51403784);
                _loc_4 = gg(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 7], 14, 1735328473);
                _loc_3 = gg(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 12], 20, -1926607734);
                _loc_2 = hh(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 5], 4, -378558);
                _loc_5 = hh(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 8], 11, -2022574463);
                _loc_4 = hh(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 11], 16, 1839030562);
                _loc_3 = hh(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 14], 23, -35309556);
                _loc_2 = hh(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 1], 4, -1530992060);
                _loc_5 = hh(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 4], 11, 1272893353);
                _loc_4 = hh(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 7], 16, -155497632);
                _loc_3 = hh(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 10], 23, -1094730640);
                _loc_2 = hh(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 13], 4, 681279174);
                _loc_5 = hh(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 0], 11, -358537222);
                _loc_4 = hh(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 3], 16, -722521979);
                _loc_3 = hh(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 6], 23, 76029189);
                _loc_2 = hh(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 9], 4, -640364487);
                _loc_5 = hh(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 12], 11, -421815835);
                _loc_4 = hh(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 15], 16, 530742520);
                _loc_3 = hh(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 2], 23, -995338651);
                _loc_2 = ii(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 0], 6, -198630844);
                _loc_5 = ii(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 7], 10, 1126891415);
                _loc_4 = ii(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 14], 15, -1416354905);
                _loc_3 = ii(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 5], 21, -57434055);
                _loc_2 = ii(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 12], 6, 1700485571);
                _loc_5 = ii(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 3], 10, -1894986606);
                _loc_4 = ii(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 10], 15, -1051523);
                _loc_3 = ii(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 1], 21, -2054922799);
                _loc_2 = ii(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 8], 6, 1873313359);
                _loc_5 = ii(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 15], 10, -30611744);
                _loc_4 = ii(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 6], 15, -1560198380);
                _loc_3 = ii(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 13], 21, 1309151649);
                _loc_2 = ii(_loc_2, _loc_3, _loc_4, _loc_5, _loc_10[_loc_12 + 4], 6, -145523070);
                _loc_5 = ii(_loc_5, _loc_2, _loc_3, _loc_4, _loc_10[_loc_12 + 11], 10, -1120210379);
                _loc_4 = ii(_loc_4, _loc_5, _loc_2, _loc_3, _loc_10[_loc_12 + 2], 15, 718787259);
                _loc_3 = ii(_loc_3, _loc_4, _loc_5, _loc_2, _loc_10[_loc_12 + 9], 21, -343485551);
                _loc_2 = _loc_2 + _loc_6;
                _loc_3 = _loc_3 + _loc_7;
                _loc_4 = _loc_4 + _loc_8;
                _loc_5 = _loc_5 + _loc_9;
                _loc_12 = _loc_12 + 16;
            }// end while
            return IntUtil.toHex(_loc_2) + IntUtil.toHex(_loc_3) + IntUtil.toHex(_loc_4) + IntUtil.toHex(_loc_5);
        }// end function
*/

文件happyfram
SecurityKey.encodeKey)
  /**
    private static var KEYJPG:Class = SecurityKey_KEYJPG;
    
   public static function get encodeKey() : String
        {
            var _loc_1:Bitmap;
            var _loc_2:String;
            if (_encodeKey != "inu")
            {
                return _encodeKey;
            }// end if
            _loc_1 = new KEYJPG();
            _loc_2 = _loc_1.bitmapData.getPixel32(3, 5).toString(23);
            return _loc_2;
        }// end function
  */
  
   var _loc_1:Bitmap;
   
   文件happyfram
   mx.core.BitmapAsset
    public class SecurityKey_KEYJPG extends BitmapAsset
  /**
  
  
  */